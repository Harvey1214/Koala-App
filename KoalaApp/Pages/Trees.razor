@page "/trees"

@using Data
@using DataAccessLibrary

@inject AccountHandler AccountHandler
@inject ProjectsHandler ProjectsHandler
@inject NavigationManager NavigationManager
@inject UsersHandler UsersHandler 
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

<NewTree Parent="@this" />

<br />

<EditTree @ref="EditTree" />

<br />

<h5>Trees</h5>

<table class="table">
    <thead>
        <tr>
            <th>Name</th>
            <th>Created</th>
            <th>Last Opened</th>
            <th>Open</th>
            <th>Preferences</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var project in Projects)
        {
            <tr>
                <td>@project.Name</td>
                <td>@project.DateCreated</td>
                <td>@project.LastOpened</td>
                <td><button class="btn btn-outline-secondary" @onclick="() => OpenProject(project.Id)">Open</button></td>
                <td><button class="btn btn-secondary" @onclick="() => OpenProjectPreferences(project)"><span class="oi oi-wrench"></span></button></td>
            </tr>
        }
    </tbody>
</table>

@code {
    public List<Project> Projects { get; set; } = new List<Project>();

    private bool redirectToLoginPage = false;

    private EditTree EditTree { get; set; }

    private void OpenProjectPreferences(Project project)
    {
        if (EditTree == null)
        {
            return;
        }

        EditTree.Edit(project);
    }

    private void OpenProject(int id)
    {
        NavigationManager.NavigateTo($"/tree/{id}");
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender) LoadProjects();

        if (redirectToLoginPage)
        {
            NavigationManager.NavigateTo("/login");
        }
    }

    private async void LoadProjects()
    {
        if (AccountHandler.User == null)
        {
            var cookieContent = await LocalStorage.GetItemAsync<string>("QoAOgiNzhb");
            AccountHandler.HandleCookies(cookieContent);
        }

        if (AccountHandler.User == null)
        {
            redirectToLoginPage = true;
            return;
        }

        Projects = ProjectsHandler.GetProjectsOfUser(AccountHandler.User.Id) ?? new List<Project>();

        InvokeAsync(StateHasChanged);
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
        LoadProjects();
    }
}
