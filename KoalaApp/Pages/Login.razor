@page "/login"

@using Data.ValidationModels
@using Data
@using DataAccessLibrary

@inject UsersHandler UsersHandler
@inject NavigationManager NavManager
@inject AccountHandler AccountHandler
@inject CookieSecurityHandler CookieSecurityHandler
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage

@if (SignUpSuccessful)
{
    <HxAlert Color="ThemeColor.Success">
        You have <strong>successfuly signed up</strong>, please login
    </HxAlert>
}

@if (LoginNotSuccessful)
{
    <HxAlert Color="ThemeColor.Danger">
        Acccount with this email <strong>doesn't</strong> exist, please <a class="alert-link" href="/signup">sign up</a>
    </HxAlert>
}

@if (UsernameAndPasswordDoNotMatch)
{
    <HxAlert Color="ThemeColor.Danger">
        Email and password <strong>do not match</strong>, <a class="alert-link" href="/forgotpassword">forgot password?</a>
    </HxAlert>
}

<h3>Login</h3>

<EditForm Model="LoginModel" OnValidSubmit="@ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <HxInputText @bind-Value="LoginModel.Email" Placeholder="Email" />
    <HxInputText @bind-Value="LoginModel.Password" Placeholder="Password" Type="InputType.Password" CssClass="mb-0" />

    <HxSubmit Text="Login" />
</EditForm>

@code {
    private LoginModel LoginModel = new LoginModel();

    private bool LoginNotSuccessful { get; set; } = false;
    private bool UsernameAndPasswordDoNotMatch { get; set; } = false;
    private bool SignUpSuccessful { get; set; } = false;

    private bool removeCookie = false;

    protected override void OnInitialized()
    {
        string logout = "";
        NavManager.TryGetQueryString<string>("logout", out logout);

        string signup = "";
        NavManager.TryGetQueryString<string>("signup", out signup);

        if (logout == "true")
        {
            AccountHandler.User = null;
            removeCookie = true;
        }

        if (signup == "true")
        {
            SignUpSuccessful = true;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (removeCookie)
        {
            RemoveCookie();
        }
    }

    private void ValidSubmit()
    {
        List<User> users = UsersHandler.GetUsers(LoginModel.Email);

        if (users != null)
            if (users.Count > 0)
                if (users.First().Password == LoginModel.Password)
                {
                    LoginUser(users.First());
                    return;
                }

        LoginNotSuccessful = true;
    }

    private void LoginUser(User user)
    {
        AccountHandler.User = user;
        SetCookie(user);

        NavManager.NavigateTo("/trees");
    }

    private async void SetCookie(User user)
    {
        await LocalStorage.SetItemAsync("QoAOgiNzhb", CookieSecurityHandler.EncryptCookie(user.Id.ToString()));
    }

    private async void RemoveCookie()
    {
        await LocalStorage.RemoveItemAsync("QoAOgiNzhb");
    }
}
