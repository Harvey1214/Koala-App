@using DataAccessLibrary
@using Data

@inject TwigsTempStorage TwigsTempStorage
@inject TwigsHandler TwigsHandler 

<div style="margin-bottom:1rem;">
    <button class="btn btn-outline-info" @onclick="AddTwig">Add twig</button>
</div>

<div class="block SmallerPage">
    @if (TwigsTempStorage.Twigs != null)
    {
        @foreach (var twig in TwigsTempStorage.OrderedTwigs)
        {
            <NestedTwig Twig="@twig" NestedStructure="@this" @ref="AddNestedTwigToList" />
        }
    }
</div>

@code {
    [Parameter]
    public int ProjectId { get; set; }

    [Parameter]
    public Project Project { get; set; }

    private List<NestedTwig> NestedTwigs = new List<NestedTwig>();
    private NestedTwig AddNestedTwigToList
    {
        set
        {
            NestedTwigs.Add(value);
        }
    }

    protected override void OnInitialized()
    {
        TwigsTempStorage.NestedStructure = this;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            TwigsTempStorage.Order();
        }
    }

    public void UpdateAll()
    {
        foreach (var twig in NestedTwigs)
        {
            twig.Update();
        }
    }

    private void AddTwig()
    {
        // insert the new twig into the database
        TwigsHandler.InsertTwig(ProjectId);

        // add the new twig to the GUI
        int newTwigId = TwigsHandler.GetLastId();
        TwigsTempStorage.Twigs.Add(
            new Twig()
            {
                Id = newTwigId,
                ProjectId = ProjectId,
                ParentId = null,
                Title = "New Twig",
                DueDate = DateTime.Now,
                Priority = 0,
                Description = "",
                State = State.NOTSTARTED,
                AbsoluteLevel = 0,
                RelativeLevel = 0
            });

        // sort twigs and update nested structure
        TwigsTempStorage.Order();

        TwigsTempStorage.OpenForEdittingId = newTwigId;
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }
}
