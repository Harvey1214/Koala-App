@using DataAccessLibrary
@using Data.Common
@using Data

@inject TwigsTempStorage TwigsTempStorage 
@inject TwigsHandler TwigsHandler 
@inject EditedTwig EditedTwig  

<div @onmouseover="OnMouseOver" @onmouseout="OnMouseOut" class="noOverflow @block">
    <div class="nextToLeft" style="height:5rem;width:@width;margin-left:@margin;">
        <img class="invisibleAbsoluteFill"/>
    </div>

    <div @onclick="OpenForEditting" @ondblclick="AddTwig" class="card @cardStyle mb-3 noOverflow" style="width: 18rem;margin-left:0px;cursor:pointer;">
        <div class="card-body">
            <h5 class="card-title noBottomPaddingMargin block">@Twig.Title</h5>
            @if (Twig.ShowChildren)
            {
                <button class="btn floatRight" @onclick="Collapse"><span class="oi oi-arrow-bottom"></span></button>
            }
            else
            {
                <button class="btn floatRight" @onclick="Collapse"><span class="oi oi-arrow-top"></span></button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Twig Twig { get; set; }

    [Parameter]
    public NestedStructure NestedStructure { get; set; }

    private string block = "";

    private string margin
    {
        get
        {
            float result = Twig.AbsoluteLevel * UISettings.MarginMultiplier;
            return $"{result}rem";
        }
    }
    private string cardStyle
    {
        get
        {
            string style = "";

            if (highlight && UISettings.LevelHighlightStyles[Twig.RelativeLevel].Length > 0)
            {
                style = UISettings.LevelHighlightStyles[Twig.RelativeLevel];
            }
            else
            {
                style = UISettings.LevelStyles[Twig.RelativeLevel];
            }

            return style;
        }
    }

    private bool highlight = false;
    private string width = "0rem";

    protected override void OnInitialized()
    {

    }

    private void Collapse()
    {
        Twig.ShowChildren = !Twig.ShowChildren;
        TwigsTempStorage.Order();

        TwigsHandler.UpdateTwigShowChildren(Twig);
    }

    #region AppearanceEffects
    private void OnMouseOut()
    {
        width = "0rem";
        highlight = false;
    }

    private void OnMouseOver()
    {
        width = UISettings.MarginHighlightAddittion.ToString() + "rem";
        highlight = true;
    }
    #endregion AppearanceEffects

    private void OpenForEditting()
    {
        EditedTwig.Twig = Twig;
        EditedTwig.NestedTwig = this;

        if (EditedTwig.Edit != null)
        {
            EditedTwig.Edit.Update();
        }
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    private void AddTwig()
    {
        for (int i = 0; i < TwigsTempStorage.Twigs.Count; i++)
        {
            if (TwigsTempStorage.Twigs[i].Id == Twig.Id)
            {
                // insert the new twig into the database
                TwigsHandler.InsertTwig(NestedStructure.ProjectId, Twig.Id);

                // add the new twig to the GUI
                int newTwigId = TwigsHandler.GetLastId();
                TwigsTempStorage.Twigs.Insert(i + 1,
                    new Twig()
                    {
                        Id = newTwigId,
                        ProjectId = NestedStructure.ProjectId,
                        ParentId = Twig.Id,
                        Title = "New Twig",
                        DueDate = DateTime.Now.AddYears(100),
                        Priority = 0,
                        Description = "",
                        State = State.NOTSTARTED,
                        AbsoluteLevel = Twig.AbsoluteLevel + 1,
                        RelativeLevel = GetNextRelativeLevel()
                    });

                // sort twigs and update nested structure
                TwigsTempStorage.Order();
                return;
            }
        }
    }

    private int GetNextRelativeLevel()
    {
        int nextRelativeLevel = Twig.RelativeLevel + 1;
        if (nextRelativeLevel >= UISettings.LevelStyles.Length)
        {
            nextRelativeLevel = 0;
        }

        return nextRelativeLevel;
    }
}
