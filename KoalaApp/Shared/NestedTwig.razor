@using DataAccessLibrary
@using Data.Common
@using Data

@inject TwigsTempStorage TwigsTempStorage
@inject TwigsHandler TwigsHandler
@inject EditedTwig EditedTwig

@if (Twig.Display) 
{
    <div class="noOverflow @block twig" style="margin-left:@margin;">
        <div @onclick="OpenForEditting" @ondblclick="AddTwig" class="card @cardStyle mb-3 noOverflow" style="width: 18rem;margin-left:0px;cursor:pointer;">
            <div class="card-body">
                <h5 class="card-title noBottomPaddingMargin block">@Twig.Title</h5>
                @if (hasChildren)
                {
                    @if (Twig.ShowChildren)
                    {
                        <button class="btn floatRight" @onclick="Collapse"><span class="oi oi-arrow-bottom"></span></button>
                    }
                    else
                    {
                        <button class="btn floatRight" @onclick="Collapse"><span class="oi oi-arrow-top"></span></button>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public Twig Twig { get; set; }

    [Parameter]
    public NestedStructure NestedStructure { get; set; }

    private string block = "";

    private string margin
    {
        get
        {
            float result = Twig.AbsoluteLevel * UISettings.MarginMultiplier;
            return $"{result}rem";
        }
    }
    private string cardStyle
    {
        get
        {
            string style = "";
            style = UISettings.LevelStyles[Twig.RelativeLevel];

            return style;
        }
    }

    private bool hasChildren
    {
        get
        {
            bool children = false;

            foreach (var twig in TwigsTempStorage.Twigs)
            {
                if (twig.ParentId.HasValue)
                {
                    if (twig.ParentId.Value == Twig.Id)
                    {
                        children = true;
                        break;
                    }
                }
            }

            return children;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Update();
        }
    }

    private void Collapse()
    {
        Twig.ShowChildren = !Twig.ShowChildren;
        TwigsTempStorage.Order();

        TwigsHandler.UpdateTwigShowChildren(Twig);
    }

    private void OpenForEditting()
    {
        EditedTwig.Twig = Twig;
        EditedTwig.NestedTwig = this;

        if (EditedTwig.Edit != null)
        {
            EditedTwig.Edit.Update();
        }
    }

    public void Update()
    {
        if (NestedStructure.Project.ShowCompleted == false)
        {
            if (Twig.State == State.COMPLETED)
            {
                Twig.Display = false;
                InvokeAsync(StateHasChanged);
                return;
            }

            var parent = TwigsTempStorage.Twigs.Where(o => o.Id == Twig.ParentId);

            if (parent != null)
                if (parent.Count() == 1)
                {
                    if (parent.First().Display == false)
                    {
                        Twig.Display = false;
                    }
                }
        }

        InvokeAsync(StateHasChanged);
    }

    private void AddTwig()
    {
        for (int i = 0; i < TwigsTempStorage.Twigs.Count; i++)
        {
            if (TwigsTempStorage.Twigs[i].Id == Twig.Id)
            {
                // insert the new twig into the database
                TwigsHandler.InsertTwig(NestedStructure.ProjectId, Twig.Id);

                // add the new twig to the GUI
                int newTwigId = TwigsHandler.GetLastId();
                TwigsTempStorage.Twigs.Insert(i + 1,
                    new Twig()
                    {
                        Id = newTwigId,
                        ProjectId = NestedStructure.ProjectId,
                        ParentId = Twig.Id,
                        Title = "New Twig",
                        DueDate = DateTime.Now,
                        Priority = 0,
                        Description = "",
                        State = State.NOTSTARTED,
                        AbsoluteLevel = Twig.AbsoluteLevel + 1,
                        RelativeLevel = GetNextRelativeLevel()
                    });

                // sort twigs and update nested structure
                TwigsTempStorage.Order();
                return;
            }
        }
    }

    private int GetNextRelativeLevel()
    {
        int nextRelativeLevel = Twig.RelativeLevel + 1;
        if (nextRelativeLevel >= UISettings.LevelStyles.Length)
        {
            nextRelativeLevel = 0;
        }

        return nextRelativeLevel;
    }
}
