@using Data
@using DataAccessLibrary

@inject TwigsTempStorage TwigsTempStorage 
@inject EditedTwig EditedTwig  

<div class="search-sort">
    <div class="list-group search-sort-list">
        <div class="dropdown">
            <button @onclick="ToggleDropdown" class="btn btn-secondary dropdown-toggle" type="button" id="dropdownMenu2" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                Sort By
            </button>
            <div class="dropdown-menu" style="@dropdownOpenedStyle" aria-labelledby="dropdownMenu2">
                <button @onclick="() => UpdateSort(SortBy.DUEDATE_HIGHTOLOW)" class="dropdown-item" type="button">Due Date Desc</button>
                <button @onclick="() => UpdateSort(SortBy.DUEDATE_LOWTOHIGH)" class="dropdown-item" type="button">Due Date Asc</button>
                <div class="dropdown-divider"></div>
                <button @onclick="() => UpdateSort(SortBy.PRIORITY_HIGHTOLOW)" class="dropdown-item" type="button">Priority Desc</button>
                <button @onclick="() => UpdateSort(SortBy.PRIORITY_LOWTOHIGH)" class="dropdown-item" type="button">Priority Asc</button>
                <div class="dropdown-divider"></div>
                <button @onclick="() => UpdateSort(SortBy.COMPLETEDDATE_HIGHTOLOW)" class="dropdown-item" type="button">Completed Date Desc</button>
                <button @onclick="() => UpdateSort(SortBy.COMPLETEDDATE_LOWTOHIGH)" class="dropdown-item" type="button">Completed Date Asc</button>
            </div>
        </div>
        @foreach (var twig in TwigsTempStorage.SortedTwigs)
        {
            <button @onclick="() => OpenForEditting(twig)" type="button" class="list-group-item list-group-item-action" alt="@GetTitle(twig)" title="@GetTitle(twig)">@twig.Title</button>
        }
    </div>
</div>

@code {      
    private bool dropdownOpened;
    private string dropdownOpenedStyle
    {
        get
        {
            if (dropdownOpened) return "display: block;";
            return "display: none";
        }
    }

    private int sortByCount = 6;

    private void ToggleDropdown()
    {
        dropdownOpened = !dropdownOpened;
    }

    private void CloseDropdown()
    {
        dropdownOpened = false;
    }

    private void UpdateSort(SortBy sortBy)
    {
        TwigsTempStorage.SortBy = sortBy;
        TwigsTempStorage.Order();

        CloseDropdown();
    }

    protected override void OnInitialized()
    {
        TwigsTempStorage.SearchSort = this;
    }

    private string GetTitle(Twig twig)
    {
        if (twig == null) return "";

        string title = "";

        int maxLength = 50;

        if (twig.Description != null)
            if (maxLength < twig.Description.Length)
                title += $"{twig.Description.Substring(0, maxLength)}...{Environment.NewLine}";
            else
                title += $"{twig.Description}{Environment.NewLine}";

        title += $"Due Date: {twig.DueDate}{Environment.NewLine}";
        title += $"Priority: {twig.Priority}";

        return title;
    }

    private void OpenForEditting(Twig twig)
    {
        EditedTwig.Twig = twig;
        EditedTwig.NestedTwig = null;

        if (EditedTwig.Edit != null)
        {
            EditedTwig.Edit.Update();
        }
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }
}
