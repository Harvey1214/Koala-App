@using Data
@using DataAccessLibrary

@inject EditedTwig EditedTwig
@inject TwigsHandler TwigsHandler
@inject TwigsTempStorage TwigsTempStorage
@inject WindowDimensions WindowDimensions 
@inject ProjectsHandler ProjectsHandler 
@inject IJSRuntime JS

<div class="card edit resizable-window" style="display: @visible;">
    <div class="edit-content resizable-window-content">
        <h5 class="card-header">Edit</h5>
        <div class="card-body">
            @if (EditedTwig.Twig != null)
            {
                <div class="form-group">
                    <button @onclick="Copy" type="button" class="btn btn-link block">Copy</button>
                    <button @onclick="Paste" type="button" class="btn btn-link">Paste</button>
                    <button @onclick="Close" class="btn btn-secondary hide-edit-btn" style="float: right;"><span class="oi oi-minus"></span></button>
                </div>
                <div class="form-group">
                    @if (EditedTwig.Twig.CompletedDate.HasValue)
                    {
                        <div>Completed @EditedTwig.Twig.CompletedDate.Value.ToString()</div>
                    }
                </div>
                <div class="form-group">
                    @if (Latency < LatencyLimitForInstantUpdating && Latency > 0 && WindowDimensions.Mobile == false)
                    {
                        <input @ref="Title" @onfocusout="() => { UpdateTwigInDatabase(); }" @bind="EditedTwig.Twig.Title" @oninput="(e) => { EditedTwig.Twig.Title = (string)e.Value; UpdateEditedTwig(); }" class="form-control" placeholder="Title" />
                    }
                    else
                    {
                        <input @ref="Title" @onfocusout="() => { UpdateTwigInDatabase(); UpdateEditedTwig(); }" @bind="EditedTwig.Twig.Title" class="form-control" placeholder="Title" />
                    }
                </div>
                <div class="form-group">
                    <textarea 
                              style="@DescriptionWidth"
                              @ref="Description" 
                              @onmouseup="SaveDescriptionWidth" 
                              @onfocusout="() => { UpdateTwigInDatabase(); UpdateEditedTwig(); }" 
                              @bind="EditedTwig.Twig.Description" 
                              placeholder="Description" 
                              class="form-control" 
                              rows="3" />
                </div>
                <div class="form-group">
                    <input type="datetime-local" class="form-control" @onfocusout="() => TwigsHandler.UpdateTwigDueDate(EditedTwig.Twig)" @bind="EditedTwig.Twig.DueDate" @oninput="@((e) => { SetDueDate((string)e.Value); UpdateEditedTwig(); })" placeholder="Due Date" />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" @onfocusout="() => UpdateTwigInDatabase()" @bind="EditedTwig.Twig.Priority" @oninput="@((e) => { SetPriority((string)e.Value); UpdateEditedTwig(); })" placeholder="Priority" />
                </div>
                <div id="state" class="form-group">
                    <div class="form-check">
                        @if (EditedTwig.Twig.State == State.NOTSTARTED)
                        {
                            <input @onclick="() => SetState(State.NOTSTARTED)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" checked>
                        }
                        else
                        {
                            <input @onclick="() => SetState(State.NOTSTARTED)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1">
                        }
                        <label class="form-check-label" for="exampleRadios1">
                            Not started yet
                        </label>
                    </div>
                    <div class="form-check">
                        @if (EditedTwig.Twig.State == State.INPROGRESS)
                        {
                            <input @onclick="() => SetState(State.INPROGRESS)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2" checked>
                        }
                        else
                        {
                            <input @onclick="() => SetState(State.INPROGRESS)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2">
                        }
                        <label class="form-check-label" for="exampleRadios2">
                            In Progress
                        </label>
                    </div>
                    <div class="form-check">
                        @if (EditedTwig.Twig.State == State.COMPLETED)
                        {
                            <input @onclick="() => SetState(State.COMPLETED)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3" checked>
                        }
                        else
                        {
                            <input @onclick="() => SetState(State.COMPLETED)" class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3">
                        }
                        <label class="form-check-label" for="exampleRadios3">
                            Completed
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-danger" @onclick="DeleteTwig">Remove</button>
                </div>
            }
            else
            {
        <div class="form-group">
            <button @onclick="Copy" type="button" class="btn btn-link block" disabled>Copy</button>
            <button @onclick="Paste" type="button" class="btn btn-link" disabled>Paste</button>
            <button @onclick="Close" class="btn btn-secondary hide-edit-btn" style="float: right;"><span class="oi oi-minus"></span></button>
        </div>
                <div class="form-group">
                    <input class="form-control" placeholder="Title" disabled />
                </div>
                <div class="form-group">
                    <textarea class="form-control" rows="3" placeholder="Description" disabled />
                </div>
                <div class="form-group">
                    <input type="datetime-local" class="form-control" placeholder="Due Date" disabled />
                </div>
                <div class="form-group">
                    <input type="number" class="form-control" placeholder="Priority" disabled />
                </div>
                <div class="form-group">
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios1" value="option1" disabled>
                        <label class="form-check-label" for="exampleRadios1">
                            Not started yet
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios2" value="option2" disabled>
                        <label class="form-check-label" for="exampleRadios2">
                            In Progress
                        </label>
                    </div>
                    <div class="form-check">
                        <input class="form-check-input" type="radio" name="exampleRadios" id="exampleRadios3" value="option3" disabled>
                        <label class="form-check-label" for="exampleRadios3">
                            Completed
                        </label>
                    </div>
                </div>
                <div class="form-group">
                    <button class="btn btn-danger" disabled>Remove</button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public bool Visible { get; set; } = true;

    private string visible
    {
        get
        {
            if (Visible) return "block";
            return "none";
        }
    }

    protected ElementReference Title;

    protected ElementReference Description;
    private string DescriptionWidth
    {
        get
        {
            if (TwigsTempStorage == null) return "";
            if (TwigsTempStorage.Tree == null) return "";
            if (TwigsTempStorage.Tree.Project == null) return "";
            if (TwigsTempStorage.Tree.Project.DescriptionFieldWidth == 0) return "";

            return $"height: {TwigsTempStorage.Tree.Project.DescriptionFieldWidth}px";
        }
    }

    private DateTime StartLoadTime { get; set; }
    private double Latency { get; set; }

    private double LatencyLimitForInstantUpdating { get; } = 50;

    private void Copy()
    {
        TwigsTempStorage.CopiedTwig = EditedTwig.Twig.Copy();
    }

    private void Paste()
    {
        // check if there's a twig in the clipboard
        if (TwigsTempStorage.CopiedTwig == null)
        {
            return;
        }

        Twig twig = TwigsTempStorage.CopiedTwig.Copy();

        EditedTwig.Twig.Title = twig.Title;
        EditedTwig.Twig.Description = twig.Description;
        EditedTwig.Twig.Priority = twig.Priority;
        EditedTwig.Twig.State = twig.State;
        EditedTwig.Twig.DueDate = twig.DueDate;
        EditedTwig.Twig.CompletedDate = twig.CompletedDate;
        EditedTwig.Twig.ShowChildren = twig.ShowChildren;

        Update();
        EditedTwig.NestedTwig.Update();

        UpdateTwigInDatabase();
        TwigsHandler.UpdateTwigDueDate(EditedTwig.Twig);
        TwigsHandler.UpdateTwigCompletedDate(EditedTwig.Twig);
        TwigsHandler.UpdateTwigShowChildren(EditedTwig.Twig);

    }

    private void SetState(State state)
    {
        EditedTwig.Twig.State = state;

        if (state == State.COMPLETED)
        {
            EditedTwig.Twig.CompletedDate = DateTime.Now;
        }
        else
        {
            EditedTwig.Twig.CompletedDate = null;
        }

        Update();

        UpdateTwigInDatabase();
        TwigsHandler.UpdateTwigCompletedDate(EditedTwig.Twig);

        TwigsTempStorage.Order();
    }
    private void SetDueDate(string dueDateText)
    {
        DateTime dueDate;
        bool success = DateTime.TryParse(dueDateText, out dueDate);

        if (success)
        {
            if (dueDate.Year > 1800 && dueDate.Year < 9000)
            {
                EditedTwig.Twig.DueDate = dueDate;
            }
        }

        TwigsTempStorage.Order();
    }
    private void SetPriority(string priorityText)
    {
        int priority;
        bool success = Int32.TryParse(priorityText, out priority);

        if (success)
        {
            EditedTwig.Twig.Priority = priority;
        }

        TwigsTempStorage.Order();
    }

    private void UpdateTwigInDatabase()
    {
        if (EditedTwig.Twig != null)
        {
            TwigsHandler.UpdateTwig(EditedTwig.Twig);
        }
    }

    private void DeleteTwig()
    {
        // deleting the twig record from the database
        TwigsHandler.RemoveTwig(EditedTwig.Twig.Id);

        // removing the twig from the GUI
        TwigsTempStorage.Twigs.Remove(EditedTwig.Twig);
        TwigsTempStorage.Order();

        // not displaing the twig anymore in the edit
        EditedTwig.Twig = null;
    }

    private void UpdateEditedTwig()
    {
        if (EditedTwig.NestedTwig != null)
            EditedTwig.NestedTwig.Update();
        else
        {
            TwigsTempStorage.NestedStructure.UpdateAll();
        }

        TwigsTempStorage.UpdateSearchSort();
    }

    protected override void OnInitialized()
    {
        StartLoadTime = DateTime.Now;
        EditedTwig.Edit = this;
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Latency = (DateTime.Now - StartLoadTime).TotalMilliseconds;
            InvokeAsync(StateHasChanged);
        }
    }

    public void MobileOpenForEdittingCheck()
    {
        if (WindowDimensions.Mobile)
        {
            Visible = true;
        }
    }
    private void Close()
    {
        Visible = false;
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    public void FocusOnTitle()
    {
        if (Title.Equals(null) == false) Title.FocusAsync();
    }

    private async void SaveDescriptionWidth()
    {
        if (Description.Equals(null) || TwigsTempStorage.Tree == null) return;

        BoundingClientRect rect = await GetElementRect(Description);
        TwigsTempStorage.Tree.Project.DescriptionFieldWidth = (int)rect.Height;

        ProjectsHandler.UpdateProjectDescriptionFieldWidth(TwigsTempStorage.Tree.Project);
    }

    public async Task<BoundingClientRect> GetElementRect(ElementReference elementReference)
    {
        return await JS.InvokeAsync<BoundingClientRect>("MyDOMGetBoundingClientRect", elementReference);
    }
}
