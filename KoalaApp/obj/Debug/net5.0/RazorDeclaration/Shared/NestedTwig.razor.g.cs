// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace KoalaApp.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
#nullable restore
#line 1 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using System.Net.Http;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Authorization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 4 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Forms;

#line default
#line hidden
#nullable disable
#nullable restore
#line 5 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Routing;

#line default
#line hidden
#nullable disable
#nullable restore
#line 6 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web;

#line default
#line hidden
#nullable disable
#nullable restore
#line 7 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.AspNetCore.Components.Web.Virtualization;

#line default
#line hidden
#nullable disable
#nullable restore
#line 8 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using Microsoft.JSInterop;

#line default
#line hidden
#nullable disable
#nullable restore
#line 9 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using KoalaApp;

#line default
#line hidden
#nullable disable
#nullable restore
#line 10 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\_Imports.razor"
using KoalaApp.Shared;

#line default
#line hidden
#nullable disable
#nullable restore
#line 1 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\Shared\NestedTwig.razor"
using DataAccessLibrary;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\Shared\NestedTwig.razor"
using Data.Common;

#line default
#line hidden
#nullable disable
#nullable restore
#line 3 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\Shared\NestedTwig.razor"
using Data;

#line default
#line hidden
#nullable disable
    public partial class NestedTwig : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.Rendering.RenderTreeBuilder __builder)
        {
        }
        #pragma warning restore 1998
#nullable restore
#line 31 "C:\Users\mikuh\source\repos\KoalaApp\KoalaApp\Shared\NestedTwig.razor"
       
    [Parameter]
    public Twig Twig { get; set; }

    [Parameter]
    public NestedStructure NestedStructure { get; set; }

    private string block = "";

    // calculating margin using the nesting level
    private string margin
    {
        get
        {
            float result = Twig.AbsoluteLevel * UISettings.MarginMultiplier;
            return $"{result}rem";
        }
    }
    private string cardStyle
    {
        get
        {
            string style = "";
            style = UISettings.LevelStyles[Twig.RelativeLevel];

            return style;
        }
    }
    // choosing a color that stands out against the background
    private string color
    {
        get
        {
            if (Twig.RelativeLevel != 1) return "color: white;";
            return "";
        }
    }

    // finding out if this twig has children
    private bool hasChildren
    {
        get
        {
            bool children = false;

            foreach (var twig in TwigsTempStorage.Twigs)
            {
                if (twig.ParentId.HasValue == false) continue;

                if (twig.ParentId.Value == Twig.Id)
                {
                    children = true;
                    break;
                }
            }

            return children;
        }
    }

    // if this twig is currently being dragged
    private bool Dragging { get; set; } = false;
    private string paddingLeft
    {
        get
        {
            if (Dragging) return "padding-left: 0px;";
            return "";
        }
    }

    // if another twig is being dragged over this one
    private bool DragOver { get; set; } = false;
    private string onDragOverHoverEffect
    {
        get
        {
            if (DragOver) return "transform: translateX(2rem);";
            return "";
        }
    }

    // composing the title displayed when a user hovers over this task
    private string title
    {
        get
        {
            if (Twig == null) return "";

            string title = "";

            int maxLength = 50;

            if (Twig.Description != null)
                if (maxLength < Twig.Description.Length)
                    title += $"{Twig.Description.Substring(0, maxLength)}...{Environment.NewLine}";
                else
                    title += $"{Twig.Description}{Environment.NewLine}";

            title += $"Due Date: {Twig.DueDate}{Environment.NewLine}";
            title += $"Priority: {Twig.Priority}";

            return title;
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            Update();
        }

        // open this task for editting if it has been newly created
        if (TwigsTempStorage.OpenForEdittingId == Twig.Id)
        {
            OpenForEditting();
            TwigsTempStorage.OpenForEdittingId = null;
            EditedTwig.Edit.FocusOnTitle();
        }
    }

    // add the task that has been dropped onto this one as a new child
    private void OnDrop()
    {
        if (DragAndDropContainer.TransportedTwig == null) return;
        if (DragAndDropContainer.TransportedTwig == Twig) return;

        DragAndDropContainer.TransportedTwig.ParentId = Twig.Id;
        TwigsHandler.UpdateTwigParent(DragAndDropContainer.TransportedTwig);

        TwigsTempStorage.Order();
    }

    // when this twig is being dragged
    private void OnDragStart()
    {
        DragAndDropContainer.TransportedTwig = Twig;
        Dragging = true;
    }
    private void OnDragEnd()
    {
        Dragging = false;
    }

    // when another twig is being dragged over this twig
    private void OnDragOver()
    {
        DragOver = true;
    }
    private void OnDragLeave()
    {
        DragOver = false;
    }

    private void Collapse()
    {
        Twig.ShowChildren = !Twig.ShowChildren;
        TwigsTempStorage.Order();

        TwigsHandler.UpdateTwigShowChildren(Twig);
    }

    public void OpenForEditting()
    {
        EditedTwig.Twig = Twig;
        EditedTwig.NestedTwig = this;

        if (EditedTwig.Edit != null)
        {
            EditedTwig.Edit.Update();
        }
    }

    public void Update()
    {
        InvokeAsync(StateHasChanged);
    }

    private void AddTwig()
    {
        for (int i = 0; i < TwigsTempStorage.Twigs.Count; i++)
        {
            if (TwigsTempStorage.Twigs[i].Id == Twig.Id)
            {
                // insert the new twig into the database
                TwigsHandler.InsertTwig(NestedStructure.ProjectId, Twig.Id);

                // add the new twig to the GUI
                int newTwigId = TwigsHandler.GetLastId();
                TwigsTempStorage.Twigs.Insert(i + 1,
                    new Twig()
                    {
                        Id = newTwigId,
                        ProjectId = NestedStructure.ProjectId,
                        ParentId = Twig.Id,
                        Title = "",
                        DueDate = DateTime.Now,
                        Priority = 0,
                        Description = "",
                        State = State.NOTSTARTED,
                        AbsoluteLevel = Twig.AbsoluteLevel + 1,
                        RelativeLevel = GetNextRelativeLevel()
                    });

                TwigsTempStorage.OpenForEdittingId = newTwigId;

                // sort twigs and update nested structure
                TwigsTempStorage.Order();
            }
        }
    }

    private int GetNextRelativeLevel()
    {
        int nextRelativeLevel = Twig.RelativeLevel + 1;
        if (nextRelativeLevel >= UISettings.LevelStyles.Length)
        {
            nextRelativeLevel = 0;
        }

        return nextRelativeLevel;
    }

#line default
#line hidden
#nullable disable
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private EditedTwig EditedTwig { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TwigsHandler TwigsHandler { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private TwigsTempStorage TwigsTempStorage { get; set; }
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private DragAndDropContainer DragAndDropContainer { get; set; }
    }
}
#pragma warning restore 1591
